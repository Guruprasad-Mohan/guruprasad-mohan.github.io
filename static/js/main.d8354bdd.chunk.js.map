{"version":3,"sources":["components/about/aboutme.js","components/blogs/blog-Nov21-2021.js","components/blogs/blog-Nov28-2021.js","components/common/footer.js","components/common/header.js","App.js","reportWebVitals.js","index.js"],"names":["AboutMe","className","BlogNov212021","BlogNov282021","Footer","Header","App","path","exact","href","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4OAgBeA,EAbC,WACZ,OACI,qCACI,0CACA,sBAAKC,UAAU,YAAf,wHAGI,8EC6CDC,EArDO,WAClB,OACI,qCACI,2DACA,8CACA,uBACA,sUAMA,oEACA,+BACI,wCACA,mDACA,4CACA,iDAEJ,ucAOA,iEACA,ihBAQA,uDACA,+BACI,4GAGA,mOAIA,2RCSDC,EArDO,WAClB,OACI,qCACI,oEACA,8CACA,uBACA,kRAGI,uBAHJ,2KAOA,uCACA,+PAOA,uCACA,+BACI,8FAGA,uFAGA,+LAIA,uFAEI,+BACI,oEACA,qFACA,sCACA,gDAIZ,kDACA,8NAEA,uBAFA,wFAGqF,uBAHrF,wICpCGC,EARA,WACX,OACI,qBAAKH,UAAU,0CAAf,SACI,+GCKGI,EARA,WACX,OACI,qBAAKJ,UAAU,wCAAf,SACI,sDCgDGK,MA5Cf,WACI,OACI,sBAAKL,UAAU,kBAAf,UACI,cAAC,EAAD,IACA,qBAAKA,UAAU,iBAAf,SACI,sBAAKA,UAAU,MAAf,UACI,qBAAKA,UAAU,WAAf,SACI,cAAC,EAAD,MAGJ,qBAAKA,UAAU,WAAf,SAEI,eAAC,IAAD,WAII,cAAC,IAAD,CAAOM,KAAK,eAAZ,SACI,cAAC,EAAD,MAEJ,cAAC,IAAD,CAAOC,OAAK,EAACD,KAAK,IAAlB,SACI,cAAC,EAAD,WAMZ,sBAAKN,UAAU,WAAf,UACI,oBAAIA,UAAU,OAAd,qCACA,qBAAIA,UAAU,cAAd,UACI,oBAAIA,UAAU,WAAd,SACI,mBAAGA,UAAU,kBAAkBQ,KAAK,IAApC,qCAEJ,oBAAIR,UAAU,WAAd,SACI,mBAAGA,UAAU,kBAAkBQ,KAAK,eAApC,2CAMpB,cAAC,EAAD,QCpCGC,G,MAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,Q,QCCdQ,IAASC,OACL,cAAC,IAAMC,WAAP,UACI,cAAC,IAAD,UACI,cAAC,EAAD,QAGVC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.d8354bdd.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./aboutme.css\"\n\nconst AboutMe = () => {\n    return (\n        <>\n            <h5>About Me</h5>\n            <div className=\"font-body\">\n                I am Guruprasad Mohan, working as a Software Engg.\n                I am a Full-stack developer using .NET, Azure and React.\n                <p>Code enthusiast & a life long learner.</p>\n            </div>\n        </>\n    );\n};\n\nexport default AboutMe;","import React from \"react\";\n\nconst BlogNov212021 = () => {\n    return (\n        <>\n            <h2>Blog 1 - App Service Plan</h2>\n            <h6>Nov 21, 2021</h6>\n            <br/>\n            <p>\n                App Service plan in Azure can be seen as a container for the App services.\n                The App Services run within an App Service plan. It is possible to run to more than one\n                App Services within an App Service plan. The compute resources necessary for an App service is defined inside an App Service plan.\n            </p>\n\n            <h5>Components of an App Service plan </h5>\n            <ul>\n                <li>Region</li>\n                <li># of VM Instances</li>\n                <li>Size of VM</li>\n                <li>Pricing Tier</li>\n            </ul>\n            <p>\n                The Free and the Shared pricing tier may contain apps from multiple customers running in the same VM.\n                These tiers do not support scaling out.\n                The basic pricing tier and above run apps on dedicated VMs. The higher the tier, more VMs are available for scaling out.\n                The isolated pricing tier runs dedicated VMs on dedicated Azure Virtual network thus supporting both compute and network isolation for the hosted applications.\n            </p>\n\n            <h5>Working of an App Service plan </h5>\n            <p>\n                Lets assume the pricing tier you have opted in the App Service plan has 5 VMs provisioned in the plan.\n                The app service deployed in this plan runs on all the 5 provisioned VMs.\n                The ancillary features of the app service like diagnostics, logging, montioring applications all share the same VM instances.\n                By extension, if multiple apps are deployed within the Service plan, then the compute resources are similarly shared.\n                This way, the App Service plan constitutes a scale unit of the App services.\n            </p>\n\n            <h5>Design Considerations</h5>\n            <ul>\n                <li>\n                    App Service plans can be scaled up and down by changing the pricing tiers.\n                </li>\n                <li>\n                    It is cost effective to share App Services within the same App Service plan.\n                    However, this should be planned judiciously considering the requirements of individual apps in the App Service plan.\n                </li>\n                <li>\n                    If a specific App Service within the App Service plan is considered more business critical/ has more traffic then it makes sense to move it to a separate App Service plan.\n                    This way it can be managed indenpendently from the other App services.\n                </li>\n            </ul>\n        </>\n    );\n};\n\nexport default BlogNov212021;","import React from \"react\";\n\nconst BlogNov282021 = () => {\n    return (\n        <>\n            <h2>Blog 2 - API testing with Httprepl</h2>\n            <h6>Nov 28, 2021</h6>\n            <br />\n            <p>\n                For ASPNET core developers with preference to the command line tools, Microsoft has provided a lightweight, cross platform command tool to test APIs.\n                REPL (Run - Evaluate - Print - Loop) is a workflow popularized by applications like Nodejs.\n                <br/>\n                Using this command line tool, we can make HTTP requests to test Web APIs and test their output.\n                The httprepl tool ships as a NuGet package Microsoft.dotnet-httprepl.\n            </p>\n            <h5>Setup</h5>\n            <p>\n                As a pre-requisite, the system should contain a .NETCore 2.1 SDK or higher.\n                In the command prompt, run the below command.\n                dotnet tool install -g Microsoft.dotnet-httprepl\n                The -g option install the package as a global tool.\n            </p>\n\n            <h5>Usage</h5>\n            <ul>\n                <li>\n                    The first command to initiate the repl workflow is httprepl.\n                </li>\n                <li>\n                    Use the connect command to connect to a API base URI.\n                </li>\n                <li>\n                    The command ls can be used to list the available API endpoints.\n                    (This operation is possible only if the API implements Open API specifications like Swagger.)\n                </li>\n                <li>\n                    A sample operation for a GET endpoint runs as below -\n                    <ul>\n                        <li> At the command prompt - httprepl </li>\n                        <li> connect https://localhost:[port]/[ControllerName] </li>\n                        <li> ls </li>\n                        <li> GET </li>\n                    </ul>\n                </li>\n            </ul>\n            <h5>Demo Application</h5>\n            <p>Clone the repository - https://github.com/Guruprasad-Mohan/ApiClientDemo.git for a sample implementation.\n            This a simple API implementation to demo the features of the Httprepl command tool.\n            <br/>\n            The API contains 4 endpoints to support CRUD operations on a simple list of strings. <br/>\n            The file Http-REPL-Commands.txt contains commands which needs to be executed from the command line to perform CRUD operations.</p>\n        </>\n    );\n};\n\nexport default BlogNov282021;","import React from \"react\";\n\nconst Footer = () => {\n    return (\n        <div className=\"mt-5 p-4 bg-dark text-white text-center\">\n            <p>Mail your queries and feedback at emailWhichNeedsToBeCreated@_Sometime._com</p>\n        </div>\n    );\n};\n\nexport default Footer;","import React from \"react\";\n\nconst Header = () => {\n    return (\n        <div className=\"p-3 bg-primary text-white text-center\">\n            <h1>Guru's Tech space</h1>\n        </div>\n    );\n};\n\nexport default Header;","import React from \"react\";\nimport { Route, Switch } from \"react-router-dom\";\nimport './App.css';\nimport AboutMe from './components/about/aboutme';\r\nimport BlogNov212021 from './components/blogs/blog-Nov21-2021';\r\nimport BlogNov282021 from './components/blogs/blog-Nov28-2021';\r\nimport Footer from './components/common/footer';\r\nimport Header from './components/common/header';\r\n\nfunction App() {\n    return (\n        <div className=\"container-fluid\">\n            <Header />\n            <div className=\"container mt-5\">\n                <div className=\"row\">\n                    <div className=\"col-sm-2\">\n                        <AboutMe />\n                    </div>\n\n                    <div className=\"col-sm-8\">\r\n\r\n                        <Switch>\r\n                            {/*<Route path=\"/blogNov2821\" component={BlogNov282021} />*/}\r\n                            {/*<Route exact path=\"/\" component={BlogNov212021} />*/}\r\n\r\n                            <Route path=\"/blogNov2821\">\r\n                                <BlogNov282021 />\r\n                            </Route>\r\n                            <Route exact path=\"/\">\r\n                                <BlogNov212021 />\r\n                            </Route>\r\n                            \r\n                        </Switch>\r\n                    </div>\n\n                    <div className=\"col-sm-2\">\n                        <h6 className=\"mt-4\">Links to previous blogs</h6>\r\n                        <ul className=\"flex-column\">\r\n                            <li className=\"nav-item\">\r\n                                <a className=\"nav-link active\" href=\"/\">Blog Nov21, 2021 test</a>\r\n                            </li>\r\n                            <li className=\"nav-item\">\r\n                                <a className=\"nav-link active\" href=\"/blogNov2821\">Blog Nov28, 2021</a>\r\n                            </li>\r\n                        </ul>\r\n                    </div>\n                </div>\n            </div>\n            <Footer />\n        </div>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport reportWebVitals from './reportWebVitals';\nimport { BrowserRouter as Router } from \"react-router-dom\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <Router>\n            <App />\n        </Router>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}